from aiogram import Bot, Dispatcher, types, executor
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
API_TOKEN = '–í–ê–®_TELEGRAM_BOT_TOKEN'
bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

# –î–∞–Ω–Ω—ã–µ –º–µ–Ω—é (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö)
menu = {
    "–ü–∏—Ü—Ü–∞": {
        "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞": 450,
        "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏": 550,
        "4 –°—ã—Ä–∞": 600,
    },
    "–ë—É—Ä–≥–µ—Ä—ã": {
        "–ß–∏–∑–±—É—Ä–≥–µ—Ä": 250,
        "–ì–∞–º–±—É—Ä–≥–µ—Ä": 200,
        "–ë–∏–≥ –ú–∞–∫": 350,
    },
    "–ù–∞–ø–∏—Ç–∫–∏": {
        "–ö–æ–ª–∞": 100,
        "–§–∞–Ω—Ç–∞": 100,
        "–í–æ–¥–∞": 80,
    }
}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–∫–∞–∑–∞
class OrderStates(StatesGroup):
    WAITING_CATEGORY = State()
    WAITING_ITEM = State()
    WAITING_ADDRESS = State()
    WAITING_PAYMENT = State()

# –ö–æ—Ä–∑–∏–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
user_cart = {}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def main_menu():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üçï –ü–∏—Ü—Ü–∞"), KeyboardButton("üçî –ë—É—Ä–≥–µ—Ä—ã"))
    keyboard.add(KeyboardButton("ü•§ –ù–∞–ø–∏—Ç–∫–∏"), KeyboardButton("üõí –ö–æ—Ä–∑–∏–Ω–∞"))
    keyboard.add(KeyboardButton("üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"))
    return keyboard

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    await message.answer(
        "üçï –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏ –µ–¥—ã!\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=main_menu()
    )

# –í—ã–≤–æ–¥ –º–µ–Ω—é
@dp.message_handler(lambda msg: msg.text in ["üçï –ü–∏—Ü—Ü–∞", "üçî –ë—É—Ä–≥–µ—Ä—ã", "ü•§ –ù–∞–ø–∏—Ç–∫–∏"])
async def show_category(message: types.Message):
    category = message.text.replace("üçï ", "").replace("üçî ", "").replace("ü•§ ", "")
    items = menu.get(category, {})
    
    keyboard = InlineKeyboardMarkup()
    for item, price in items.items():
        keyboard.add(InlineKeyboardButton(f"{item} - {price}‚ÇΩ", callback_data=f"item_{category}_{item}"))
    
    await message.answer(f"–ú–µ–Ω—é {category}:", reply_markup=keyboard)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω—É
@dp.callback_query_handler(lambda call: call.data.startswith("item_"))
async def add_to_cart(call: types.CallbackQuery):
    _, category, item = call.data.split("_")
    price = menu[category][item]
    
    user_id = call.from_user.id
    if user_id not in user_cart:
        user_cart[user_id] = []
    
    user_cart[user_id].append({"item": item, "price": price, "category": category})
    await call.answer(f"‚úÖ {item} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ—Ä–∑–∏–Ω—ã
@dp.message_handler(lambda msg: msg.text == "üõí –ö–æ—Ä–∑–∏–Ω–∞")
async def show_cart(message: types.Message):
    user_id = message.from_user.id
    if user_id not in user_cart or not user_cart[user_id]:
        await message.answer("üõí –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    
    cart_text = "üõí –í–∞—à –∑–∞–∫–∞–∑:\n"
    total = 0
    for item in user_cart[user_id]:
        cart_text += f"- {item['item']} ({item['price']}‚ÇΩ)\n"
        total += item['price']
    
    cart_text += f"\nüí≥ –ò—Ç–æ–≥–æ: {total}‚ÇΩ"
    await message.answer(cart_text)

# –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@dp.message_handler(lambda msg: msg.text == "üì¶ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def start_order(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    if user_id not in user_cart or not user_cart[user_id]:
        await message.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞!")
        return
    
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:")
    await OrderStates.WAITING_ADDRESS.set()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞ –∏ –≤—ã–±–æ—Ä –æ–ø–ª–∞—Ç—ã
@dp.message_handler(state=OrderStates.WAITING_ADDRESS)
async def process_address(message: types.Message, state: FSMContext):
    address = message.text
    await state.update_data(address=address)
    
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üí≥ –û–Ω–ª–∞–π–Ω"), KeyboardButton("üí∞ –ù–∞–ª–∏—á–Ω—ã–º–∏"))
    
    await message.answer("üíµ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:", reply_markup=keyboard)
    await OrderStates.WAITING_PAYMENT.set()

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
@dp.message_handler(state=OrderStates.WAITING_PAYMENT)
async def process_payment(message: types.Message, state: FSMContext):
    payment_method = message.text
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    address = data.get("address", "–ù–µ —É–∫–∞–∑–∞–Ω")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–∫–∞–∑
    total = sum(item['price'] for item in user_cart[user_id])
    order_text = (
        "‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n"
        f"üìç –ê–¥—Ä–µ—Å: {address}\n"
        f"üí≥ –°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {payment_method}\n"
        f"üçï –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
    )
    
    for item in user_cart[user_id]:
        order_text += f"- {item['item']} ({item['price']}‚ÇΩ)\n"
    
    order_text += f"\nüí∏ –ò—Ç–æ–≥–æ: {total}‚ÇΩ\n\nüöÄ –î–æ—Å—Ç–∞–≤–∫–∞ –≤ —Ç–µ—á–µ–Ω–∏–µ 60 –º–∏–Ω—É—Ç!"
    
    await message.answer(order_text, reply_markup=main_menu())
    
    # –û–ø–æ–≤–µ—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —á–∞—Ç)
    admin_chat_id = "–í–ê–®_CHAT_ID"
    await bot.send_message(admin_chat_id, f"üì¶ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n{order_text}")
    
    # –û—á–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
    user_cart[user_id] = []
    await state.finish()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)